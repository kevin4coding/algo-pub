# -*- mode: snippet -*-
# name: graph::dijkstra_with_min_heap
# key: graph::dijkstra_with_min_heap
# --

struct state_t {
  const int maxn = 1000;
  mutable std::priority_queue<std::pair<int, int>,
                              std::vector<std::pair<int, int>>,
                              std::greater<std::pair<int, int>>> PQ;
  mutable std::optional<int> D[maxn];
};

const auto ST = [&](state_t self = {}) {
  // initialize state here
}();

std::function<void(void)> dijkstra = [&]() {
  if (std::empty(ST.PQ)) {
    return;
  }
  else {
    const auto [D_u, u] = ST.PQ.top();
    ST.PQ.pop();
    // optimize
    if (ST.D[u].has_value() and D_u > ST.D[u].value()) {
      return dijkstra();
    }
    for (const auto [v, w] : G[u]) {
      if (D_u + w < ST.D[v].value_or(INT_MAX)) {
        ST.D[v] = D_u + w;
        ST.PQ.emplace(std::pair{ST.D[v].value(), v});
      }
    }
    return dijkstra();
  }
};
