# -*- mode: snippet -*-
# name: data_structure::trie
# key: data_structure::trie
# --

struct trie_t {
  bool is_word;
  std::shared_ptr<trie_t> next[256];

  trie_t() = default;

  explicit trie_t(bool d) : is_word{d} {}
  
  explicit trie_t(const std::vector<std::string>& dict) : is_word{false}, next{} {
    for (const auto& word : dict) {
      insert(word);
    }
  }

  std::shared_ptr<trie_t> insert(const std::string& s, int i = 0) {
    if (next[s[i]] == nullptr) {
      next[s[i]] = std::make_shared<trie_t>(i == (std::size(s) - 1));
    }
    else {
      next[s[i]]->is_word |= (i == std::size(s) - 1);
    }
    return i == std::size(s) - 1 ? next[s[i]] : next[s[i]]->insert(s, i + 1);
  }

  bool check_word(const std::string & s, int i = 0) {
    if (next[s[i]] == nullptr) {
      return false;
    }
    return i == std::size(s) - 1 ? next[s[i]]->is_word : next[s[i]]->check_word(s, i + 1);
  }
};
